# -*- coding: utf-8 -*-
"""
Created on Fri Jan 26 20:27:34 2018

@author: Paco-Lee & Gonzalo

"""

import AG
import random
import Red_Neuronal
import conecta4


    
def p():
    return [random.uniform(-1,1) for _ in range(270)]
            

mejorC = [0.2977709248798923,
 0.936607605924253,
 0.9274137999138405,
 -0.0338477342434913,
 -0.7131760011721389,
 0.06643321671682223,
 0.3306124014631231,
 -0.6086735219325501,
 -0.4691280306719794,
 -0.18609679984989325,
 -0.23916787750877222,
 -0.4176115355331471,
 -0.18812761187076998,
 -0.22306066575257888,
 0.5871442430284575,
 -0.43313583592146765,
 0.599166568538174,
 0.4127880800934045,
 -0.03765402734585743,
 0.5920269461048211,
 0.36414527146065856,
 0.6895839624643092,
 0.6061493755370306,
 -0.3212651221568177,
 0.7376551074365199,
 0.8474083360388203,
 0.9893844553793734,
 -0.9472155956663848,
 0.9559458620709547,
 0.46108765420394726,
 0.2404941034438044,
 0.7844321005503259,
 0.03471755629589901,
 -0.5564814119092047,
 0.803380815635163,
 0.7985728135665044,
 0.06579160893212133,
 0.25923946439977064,
 -0.22808039851073292,
 0.6394134341960898,
 -0.5841013594159605,
 0.5315589428115544,
 -0.2952671261724378,
 0.0908770120395963,
 -0.4004772530780363,
 -0.6770641883945376,
 0.17757693397992447,
 -0.16525471688076054,
 -0.25526352408300257,
 0.14781990137473477,
 0.3955474171601867,
 -0.17435125155057252,
 -0.5518930470197119,
 -0.10343633782785755,
 0.42443177617043126,
 -0.9265945187123656,
 -0.10664585485328693,
 0.12067068258368985,
 0.5317440115116043,
 -0.029250618510837656,
 0.1344248899957139,
 -0.19388741317108815,
 0.2344279852276434,
 0.31623176263424524,
 0.5181528259805144,
 0.7098805119500649,
 0.9703959758689422,
 -0.061791025634334584,
 0.3649497461974265,
 0.2748475135716908,
 -0.3158866692251292,
 0.4912638943258085,
 0.47127906435581446,
 0.908523963906753,
 0.8155477307493311,
 -0.8802201855253289,
 -0.4842202465043435,
 0.137169426590523,
 -0.6108208919187841,
 0.7985111241437677,
 0.25429945917207863,
 0.8715767126396003,
 0.4967741866513229,
 -0.7160012903592121,
 -0.8464920408420951,
 -0.7103375841443305,
 -0.12663656064676898,
 0.35394657286330866,
 0.20888580491539255,
 -0.9243242213823601,
 0.24970224535821428,
 0.8860873034388006,
 -0.09229070878654455,
 0.8024533375946405,
 0.22686906612509117,
 0.12455038699056775,
 0.1094343408263545,
 0.8671136904256256,
 -0.8438183521019944,
 -0.7807534300489327,
 -0.8835183291758821,
 0.9929616489314605,
 -0.01941871653610905,
 0.7529503514724072,
 0.3373833361872056,
 0.011462662509658994,
 0.4141239428145609,
 0.3678784797909036,
 -0.16627851796736848,
 0.11544417910952909,
 -0.4032111984773452,
 -0.11392941881337615,
 -0.8976809606490561,
 0.7275523135347792,
 0.014317404525240773,
 -0.8100017659463612,
 0.25622027980268736,
 0.3196640982484016,
 0.6065881879271884,
 -0.6410273668291473,
 -0.3446320636595548,
 0.9395337731377549,
 0.5257486244816205,
 -0.8340902934173648,
 -0.7357315981609147,
 -0.7281342022015034,
 0.9025862189973148,
 0.9439910857685467,
 -0.5672008267570301,
 0.4751435846056209,
 -0.2768864354615519,
 -0.08837757896691723,
 -0.18555884905307818,
 -0.5796237986075479,
 0.6525839090164693,
 0.7463491698948499,
 -0.16444305256909852,
 -0.7921653626391871,
 -0.9807701993718643,
 -0.4346011257083484,
 -0.07165749690940282,
 0.6559240560206958,
 0.9576191301345529,
 -0.028573655814865928,
 0.5396725965524976,
 0.9795087291242073,
 0.7684351676091623,
 0.07680538960446204,
 0.33248740223159,
 0.05986891604396227,
 -0.7610543494857445,
 0.9898518986718647,
 0.01410319249572356,
 -0.5827677810283722,
 -0.8846191162200223,
 -0.42686837255330956,
 0.18518361778869408,
 0.4537036813725297,
 -0.7652719196020599,
 -0.4139825056565589,
 -0.39156952772430476,
 0.10576382562191222,
 -0.018463564091306228,
 0.6269938432461435,
 0.18043131061535433,
 0.33727088129451444,
 0.5091161448747246,
 -0.1523488779892137,
 -0.05465460318548554,
 -0.4531879966481276,
 0.763996996257432,
 -0.3876789540949752,
 -0.6988238217079994,
 0.5167625074813533,
 -0.3289120211559069,
 0.5386592634334262,
 0.40100080341850863,
 0.44019021784354906,
 0.8165453333975887,
 -0.5720167972079246,
 0.38817574003487887,
 -0.5330317344510105,
 -0.894341512679083,
 0.1426224556761171,
 0.35497541092553697,
 0.8698818605490917,
 0.16753099602186694,
 -0.9533266569500445,
 -0.8163769256181663,
 -0.48479865428485636,
 0.9844005176455031,
 0.974955344101377,
 0.3068351689803388,
 0.039526455691999196,
 -0.9466868489589113,
 -0.7697772205110907,
 0.5423186625281635,
 -0.2861157654539377,
 0.4117830324012022,
 -0.21291611910166242,
 -0.5189481450174787,
 0.5318040252956417,
 0.3971162190844897,
 -0.813750376483086,
 0.5177110085281755,
 0.41162133820384783,
 0.15382504600682867,
 -0.9040318673616525,
 -0.7969111737623404,
 -0.02003050159594144,
 -0.8532711517316542,
 0.06259641622193635,
 0.07895497100595406,
 0.009060334976652262,
 -0.5070552598574507,
 0.7631753133078092,
 -0.03267009138064392,
 -0.0078010331822639944,
 -0.9523660193733523,
 -0.4083405614133573,
 0.18741100712666348,
 0.9282963212842132,
 -0.7966348550047284,
 0.19260452082401125,
 0.030596620472549407,
 -0.6975692915681231,
 -0.17910032714908497,
 -0.10725868812766337,
 -0.8499254457594445,
 0.9806745501947436,
 0.2882553912852601,
 -0.696949628243692,
 -0.1575993986105031,
 0.9075270953714054,
 -0.6142934044133341,
 -0.19323016629185052,
 -0.7465408281346593,
 -0.9234366571195465,
 -0.06130195971689001,
 0.29074378900210984,
 0.3139309375450634,
 0.4143356731026451,
 -0.28910499970733006,
 0.42795367237363724,
 0.5635908593190104,
 0.9018098720486227,
 0.7269972217473895,
 0.16864125593337476,
 -0.5182541119836286,
 -0.07742515689118856,
 -0.7964415142465069,
 0.3911272226596436,
 0.3358361698656456,
 0.234338341757532,
 -0.420467576808335,
 0.7243304488270006,
 0.27964035386715835,
 0.9088978315834118,
 0.5445118312823751,
 0.21830515419683438,
 -0.9098990880190716,
 0.030920985266932988,
 0.6304042034807245,
 0.23883287506774398,
 0.026595212796124867,
 -0.45889740959995384,
 0.8764894734444539,
 0.9358529787052141,
 -0.8175720009500069,
 0.2851245418707964] 
      
def fitnessNeuronal(cromosoma):
    
    redNeuronal = Red_Neuronal.RedNeuronal(48,5,5,1)
    redNeuronal.actualizaPesos(cromosoma)
    
    redNeuronal2 = Red_Neuronal.RedNeuronal(48,5,5,1)
    redNeuronal2.actualizaPesos(AG.mejorC)
    
    ganador = conecta4.compareHeuristics(conecta4.HeuristicaNeuronal(redNeuronal),
                                         conecta4.HeuristicaNeuronal(redNeuronal2),3,True)
    if ganador == 0:
        return 0
    elif ganador == 1:
        AG.mejorC = cromosoma
        return 1000000
    else:
        return -1000000
    
    

#cuad_gen = DefinicionGenotipo(p(),270)

def AlgoritmoGenetico(tamPoblacion):
    
    lista = []
    
    for i in range(tamPoblacion):
        lista.append(p())
        #print(len(lista))
        #print(len(lista[0]))
    for e in range(tamPoblacion):
        resultado = fitnessNeuronal(lista[e])
        print(AG.mejorC)
        if resultado < 0:
            pass
            #mutaCromosoma(mejorC)
            
    return AG.mejorC
        
    

#fitnessNeuronal(5)
#problemaNeuronas = ProblemaGenetico(MutacionPorIntercambio(),CruceEnUnPunto(),GeneradorPermutacion(), SeleccionTorneo(1,min),fitnessNeuronal,lambda x : x)

# LLAMADA AL ALGORITMO:  
# Esta es la llamada al algoritmo genetico:                                 
# problemaNeuronas.ejecutaAlgoritmoGenetico(0.6,0.6,10,10,max) 